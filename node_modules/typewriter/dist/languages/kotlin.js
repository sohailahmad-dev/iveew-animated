"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.kotlin = void 0;
const quicktype_core_1 = require("quicktype-core");
const Kotlin_1 = require("quicktype-core/dist/language/Kotlin");
const Strings_1 = require("quicktype-core/dist/support/Strings");
const quicktype_utils_1 = require("./quicktype-utils");
class TypewriterKotlinRenderer extends Kotlin_1.KotlinXRenderer {
    constructor(targetLanguage, renderContext, typescriptOptions, typewriterOptions) {
        super(targetLanguage, renderContext, typescriptOptions);
        this.typewriterOptions = typewriterOptions;
    }
    emitMultiline(linesString) {
        (0, quicktype_utils_1.emitMultiline)(this, linesString, 2);
    }
    // We add our import for Analytics here, Kotlin is more strict about import order so we have to do it outside the templates
    emitHeader() {
        super.emitHeader();
        this.emitLine('import com.segment.analytics.kotlin.core.Analytics');
    }
    emitSource(givenOutputFilename) {
        super.emitSource(givenOutputFilename);
        (0, quicktype_utils_1.executeRenderPlan)(this, this.typewriterOptions.generators);
    }
    makeNameForTopLevel(t, givenName, maybeNamedType) {
        return (0, quicktype_utils_1.makeNameForTopLevelWithPrefixAndSuffix)((...args) => {
            return super.makeNameForTopLevel(...args);
        }, this.typewriterOptions, t, givenName, maybeNamedType);
    }
}
class TypewriterKotlinLanguage extends quicktype_core_1.KotlinTargetLanguage {
    constructor(typewriterOptions) {
        super();
        this.typewriterOptions = typewriterOptions;
    }
    makeRenderer(renderContext, untypedOptionValues) {
        return new TypewriterKotlinRenderer(this, renderContext, (0, quicktype_core_1.getOptionValues)(quicktype_core_1.kotlinOptions, untypedOptionValues), this.typewriterOptions);
    }
}
exports.kotlin = (0, quicktype_utils_1.createQuicktypeLanguageGenerator)({
    name: 'kotlin',
    quicktypeLanguage: TypewriterKotlinLanguage,
    supportedSDKs: [
        {
            name: 'Analytics.Kotlin',
            id: 'kotlin',
            templatePath: 'templates/kotlin/kotlin.hbs',
        },
        {
            name: 'None (Types and validation only)',
            id: 'none',
        },
    ],
    defaultOptions: {
        framework: 'kotlinx',
        package: 'typewriter',
        'just-types': true,
    },
    requiredOptions: ['package'],
    unsupportedOptions: ['framework'],
    nameModifiers: {
        functionName: Strings_1.camelCase,
    },
});
