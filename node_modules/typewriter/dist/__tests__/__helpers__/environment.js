"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupEnv = void 0;
const tslib_1 = require("tslib");
const node_crypto_1 = tslib_1.__importDefault(require("node:crypto"));
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const node_path_1 = tslib_1.__importDefault(require("node:path"));
const config_1 = require("../../config");
const BASE_PATH = "./test-env";
/**
 * Sets up an environment for a test by creating the right directories, config files and copying the tracking plan
 */
const setupEnv = async (slug, language, sdk, trackingPlanFile = "./src/__tests__/__data__/plan.json", id = "tp_2CJh7O9XUIirKFn4pabvhz8Cn9K", outputPath = "./", legacyID) => {
    const hash = node_crypto_1.default
        .createHash("sha256")
        .update(trackingPlanFile)
        .update(id)
        .update(outputPath)
        .update(legacyID ?? "")
        .digest("hex");
    const testPath = node_path_1.default.join(BASE_PATH, slug, language, sdk, hash);
    if (node_fs_1.default.existsSync(testPath)) {
        node_fs_1.default.rmSync(testPath, { recursive: true, force: true });
    }
    node_fs_1.default.mkdirSync(testPath, { recursive: true });
    await (0, config_1.saveWorkspaceConfig)({
        client: {
            language,
            sdk,
        },
        trackingPlans: [
            {
                name: "Test",
                id,
                path: outputPath,
                legacyID,
            },
        ],
    }, testPath);
    node_fs_1.default.copyFileSync(trackingPlanFile, node_path_1.default.join(testPath, "plan.json"));
    return testPath;
};
exports.setupEnv = setupEnv;
