"use strict";
// This client was automatically generated by Segment Typewriter. ** Do Not Edit **
// To update this file, run:
//   npx typewriter
Object.defineProperty(exports, "__esModule", { value: true });
exports.noIDType = exports.purpleEventCollided = exports.unionType = exports.simpleArrayTypes = exports.propertySanitized = exports.propertyObjectNameCollision2 = exports.propertyObjectNameCollision1 = exports.propertiesCollided = exports.nestedObjects = exports.nestedArrays = exports.largeNumbersEvent = exports.everyRequiredType = exports.everyOptionalType = exports.everyNullableRequiredType = exports.everyNullableOptionalType = exports.eventCollided = exports.enumTypes = exports.emptyEvent = exports.defaultViolationHandlerCalled = exports.defaultViolationHandler = exports.customViolationHandlerCalled = exports.customViolationHandler = exports.analyticsInstanceMissingThrewError = exports.analyticsInstanceMissing = exports.the42TerribleEventName3 = exports.setTypewriterOptions = exports.defaultValidationErrorHandler = exports.StringEnum = exports.StringConst = void 0;
/**
 * A string property that only accepts a single enum value.
 */
var StringConst;
(function (StringConst) {
    StringConst["RickSanchez"] = "Rick Sanchez";
})(StringConst = exports.StringConst || (exports.StringConst = {}));
/**
 * A string property that accepts multiple enum values.
 */
var StringEnum;
(function (StringEnum) {
    StringEnum["EvilMorty"] = "Evil Morty";
    StringEnum["LawyerMorty"] = "Lawyer Morty";
})(StringEnum = exports.StringEnum || (exports.StringEnum = {}));
/**
 * The default handler that is fired if none is supplied with setTypewriterOptions.
 * This handler will log a warning message to the console.
 */
const defaultValidationErrorHandler = (message, violations) => {
    const msg = JSON.stringify({
        type: 'Typewriter JSON Schema Validation Error',
        description: `You made an analytics call (${message.event}) using Typewriter that doesn't match the ` +
            'Tracking Plan spec.',
        errors: violations,
    }, undefined, 2);
    console.warn(msg);
};
exports.defaultValidationErrorHandler = defaultValidationErrorHandler;
let analytics = () => {
    return window.analytics;
};
/**
 * Updates the run-time configuration of this Typewriter client.
 *
 * @param {TypewriterOptions} options - the options to upsert
 *
 * @typedef {Object} TypewriterOptions
 * @property {AnyAnalytics} [analytics] - Underlying analytics instance where analytics
 * 		calls are forwarded on to. Defaults to window.analytics.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
function setTypewriterOptions(options) {
    analytics = options.analytics ? () => options.analytics || window.analytics : analytics;
}
exports.setTypewriterOptions = setTypewriterOptions;
/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(message = {}) {
    return {
        ...message,
        context: {
            ...(message.context || {}),
            typewriter: {
                language: 'typescript',
            },
        },
    };
}
/**
 * Fires a 'The42_TerribleEventName3' track call.
 *
 * @param The42_TerribleEventName3 props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function the42TerribleEventName3(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('42_--terrible&#x3D;&#x3D;\&quot;event&#x27;++name~!3', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.the42TerribleEventName3 = the42TerribleEventName3;
/**
 * Fires a 'AnalyticsInstanceMissing' track call.
 *
 * @param AnalyticsInstanceMissing props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function analyticsInstanceMissing(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Analytics Instance Missing', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.analyticsInstanceMissing = analyticsInstanceMissing;
/**
 * Fires a 'AnalyticsInstanceMissingThrewError' track call.
 *
 * @param AnalyticsInstanceMissingThrewError props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function analyticsInstanceMissingThrewError(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Analytics Instance Missing Threw Error', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.analyticsInstanceMissingThrewError = analyticsInstanceMissingThrewError;
/**
 * Fires a 'CustomViolationHandler' track call.
 *
 * @param CustomViolationHandler props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function customViolationHandler(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Custom Violation Handler', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.customViolationHandler = customViolationHandler;
/**
 * Fires a 'CustomViolationHandlerCalled' track call.
 *
 * @param CustomViolationHandlerCalled props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function customViolationHandlerCalled(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Custom Violation Handler Called', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.customViolationHandlerCalled = customViolationHandlerCalled;
/**
 * Fires a 'DefaultViolationHandler' track call.
 *
 * @param DefaultViolationHandler props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function defaultViolationHandler(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Default Violation Handler', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.defaultViolationHandler = defaultViolationHandler;
/**
 * Fires a 'DefaultViolationHandlerCalled' track call.
 *
 * @param DefaultViolationHandlerCalled props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function defaultViolationHandlerCalled(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Default Violation Handler Called', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.defaultViolationHandlerCalled = defaultViolationHandlerCalled;
/**
 * Fires a 'EmptyEvent' track call.
 *
 * @param EmptyEvent props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function emptyEvent(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Empty Event', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.emptyEvent = emptyEvent;
/**
 * Fires a 'EnumTypes' track call.
 *
 * @param EnumTypes props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function enumTypes(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Enum Types', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.enumTypes = enumTypes;
/**
 * Fires a 'EventCollided' track call.
 *
 * @param EventCollided props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function eventCollided(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Event Collided', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.eventCollided = eventCollided;
/**
 * Fires a 'EveryNullableOptionalType' track call.
 *
 * @param EveryNullableOptionalType props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function everyNullableOptionalType(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Every Nullable Optional Type', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.everyNullableOptionalType = everyNullableOptionalType;
/**
 * Fires a 'EveryNullableRequiredType' track call.
 *
 * @param EveryNullableRequiredType props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function everyNullableRequiredType(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Every Nullable Required Type', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.everyNullableRequiredType = everyNullableRequiredType;
/**
 * Fires a 'EveryOptionalType' track call.
 *
 * @param EveryOptionalType props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function everyOptionalType(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Every Optional Type', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.everyOptionalType = everyOptionalType;
/**
 * Fires a 'EveryRequiredType' track call.
 *
 * @param EveryRequiredType props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function everyRequiredType(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Every Required Type', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.everyRequiredType = everyRequiredType;
/**
 * Fires a 'LargeNumbersEvent' track call.
 *
 * @param LargeNumbersEvent props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function largeNumbersEvent(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Large Numbers Event', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.largeNumbersEvent = largeNumbersEvent;
/**
 * Fires a 'NestedArrays' track call.
 *
 * @param NestedArrays props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function nestedArrays(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Nested Arrays', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.nestedArrays = nestedArrays;
/**
 * Fires a 'NestedObjects' track call.
 *
 * @param NestedObjects props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function nestedObjects(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Nested Objects', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.nestedObjects = nestedObjects;
/**
 * Fires a 'PropertiesCollided' track call.
 *
 * @param PropertiesCollided props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function propertiesCollided(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Properties Collided', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.propertiesCollided = propertiesCollided;
/**
 * Fires a 'PropertyObjectNameCollision1' track call.
 *
 * @param PropertyObjectNameCollision1 props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function propertyObjectNameCollision1(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Property Object Name Collision #1', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.propertyObjectNameCollision1 = propertyObjectNameCollision1;
/**
 * Fires a 'PropertyObjectNameCollision2' track call.
 *
 * @param PropertyObjectNameCollision2 props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function propertyObjectNameCollision2(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Property Object Name Collision #2', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.propertyObjectNameCollision2 = propertyObjectNameCollision2;
/**
 * Fires a 'PropertySanitized' track call.
 *
 * @param PropertySanitized props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function propertySanitized(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Property Sanitized', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.propertySanitized = propertySanitized;
/**
 * Fires a 'SimpleArrayTypes' track call.
 *
 * @param SimpleArrayTypes props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function simpleArrayTypes(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Simple Array Types', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.simpleArrayTypes = simpleArrayTypes;
/**
 * Fires a 'UnionType' track call.
 *
 * @param UnionType props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function unionType(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('Union Type', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.unionType = unionType;
/**
 * Fires a 'PurpleEventCollided' track call.
 *
 * @param PurpleEventCollided props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function purpleEventCollided(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('event_collided', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.purpleEventCollided = purpleEventCollided;
/**
 * Fires a 'NoIDType' track call.
 *
 * @param NoIDType props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 	call is fired.
 */
function noIDType(props, options, callback) {
    const a = analytics();
    if (a) {
        a.track('NoID type', props || {}, { ...options, context: {
                ...(options?.context || {}),
                typewriter: {
                    language: 'typescript',
                    version: '',
                },
            }, }, callback);
    }
}
exports.noIDType = noIDType;
const clientAPI = {
    /**
     * Updates the run-time configuration of this Typewriter client.
     *
     * @param {TypewriterOptions} options - the options to upsert
     *
     * @typedef {Object} TypewriterOptions
     * @property {AnyAnalytics} [analytics] - Underlying analytics instance where analytics
     * 		calls are forwarded on to. Defaults to window.analytics.
     * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
     * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
     * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
     * 		will be logged to stderr.
     */
    setTypewriterOptions,
    /**
     * Fires a 'The42_TerribleEventName3' track call.
     *
     * @param The42_TerribleEventName3 props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    the42TerribleEventName3,
    /**
     * Fires a 'AnalyticsInstanceMissing' track call.
     *
     * @param AnalyticsInstanceMissing props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    analyticsInstanceMissing,
    /**
     * Fires a 'AnalyticsInstanceMissingThrewError' track call.
     *
     * @param AnalyticsInstanceMissingThrewError props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    analyticsInstanceMissingThrewError,
    /**
     * Fires a 'CustomViolationHandler' track call.
     *
     * @param CustomViolationHandler props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    customViolationHandler,
    /**
     * Fires a 'CustomViolationHandlerCalled' track call.
     *
     * @param CustomViolationHandlerCalled props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    customViolationHandlerCalled,
    /**
     * Fires a 'DefaultViolationHandler' track call.
     *
     * @param DefaultViolationHandler props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    defaultViolationHandler,
    /**
     * Fires a 'DefaultViolationHandlerCalled' track call.
     *
     * @param DefaultViolationHandlerCalled props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    defaultViolationHandlerCalled,
    /**
     * Fires a 'EmptyEvent' track call.
     *
     * @param EmptyEvent props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    emptyEvent,
    /**
     * Fires a 'EnumTypes' track call.
     *
     * @param EnumTypes props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    enumTypes,
    /**
     * Fires a 'EventCollided' track call.
     *
     * @param EventCollided props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    eventCollided,
    /**
     * Fires a 'EveryNullableOptionalType' track call.
     *
     * @param EveryNullableOptionalType props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    everyNullableOptionalType,
    /**
     * Fires a 'EveryNullableRequiredType' track call.
     *
     * @param EveryNullableRequiredType props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    everyNullableRequiredType,
    /**
     * Fires a 'EveryOptionalType' track call.
     *
     * @param EveryOptionalType props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    everyOptionalType,
    /**
     * Fires a 'EveryRequiredType' track call.
     *
     * @param EveryRequiredType props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    everyRequiredType,
    /**
     * Fires a 'LargeNumbersEvent' track call.
     *
     * @param LargeNumbersEvent props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    largeNumbersEvent,
    /**
     * Fires a 'NestedArrays' track call.
     *
     * @param NestedArrays props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    nestedArrays,
    /**
     * Fires a 'NestedObjects' track call.
     *
     * @param NestedObjects props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    nestedObjects,
    /**
     * Fires a 'PropertiesCollided' track call.
     *
     * @param PropertiesCollided props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    propertiesCollided,
    /**
     * Fires a 'PropertyObjectNameCollision1' track call.
     *
     * @param PropertyObjectNameCollision1 props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    propertyObjectNameCollision1,
    /**
     * Fires a 'PropertyObjectNameCollision2' track call.
     *
     * @param PropertyObjectNameCollision2 props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    propertyObjectNameCollision2,
    /**
     * Fires a 'PropertySanitized' track call.
     *
     * @param PropertySanitized props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    propertySanitized,
    /**
     * Fires a 'SimpleArrayTypes' track call.
     *
     * @param SimpleArrayTypes props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    simpleArrayTypes,
    /**
     * Fires a 'UnionType' track call.
     *
     * @param UnionType props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    unionType,
    /**
     * Fires a 'PurpleEventCollided' track call.
     *
     * @param PurpleEventCollided props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    purpleEventCollided,
    /**
     * Fires a 'NoIDType' track call.
     *
     * @param NoIDType props - The analytics properties that will be sent to Segment.
     * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
     * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
     * 	call is fired.
     */
    noIDType,
};
exports.default = new Proxy(clientAPI, {
    get(target, method) {
        if (typeof method === 'string' && target.hasOwnProperty(method)) {
            return target[method];
        }
        return () => {
            console.warn(`⚠️  You made an analytics call (${String(method)}) that can't be found. Either:
         a) Re-generate your typewriter client: \`npx typewriter\`
         b) Add it to your Tracking Plan: https://app.segment.com/segment-oscb/protocols/tracking-plans/rs_1zTHJU9fd5mt7cndWnd4PgJbMCE`);
            const a = analytics();
            if (a) {
                a.track('Unknown Analytics Call Fired', {
                    method,
                }, withTypewriterContext());
            }
        };
    },
});
