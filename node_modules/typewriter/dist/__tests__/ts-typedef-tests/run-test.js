"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const node_child_process_1 = require("node:child_process");
const node_util_1 = require("node:util");
const node_path_1 = tslib_1.__importDefault(require("node:path"));
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
/**
 * Typecheck current project
 */
async function typecheck() {
    const cmd = [
        `node_modules/.bin/tsc`,
        `--pretty false`,
        `--noEmit`,
        `--lib "es2020","dom"`,
    ].join(" ");
    try {
        await (0, node_util_1.promisify)(node_child_process_1.exec)(cmd);
        return { ok: true };
    }
    catch (err) {
        if (!err || typeof err !== "object" || !err.stdout) {
            // invariant - should not happen
            throw err;
        }
        const errors = err.stdout.toString().split("\n");
        return { ok: false, errors };
    }
}
/**
 * @example
 * listFiles("/foo") => ['/foo/bar.txt', '/foo/baz.txt']
 */
const listFiles = (path) => node_fs_1.default
    .readdirSync(path, { withFileTypes: true })
    .filter((dirent) => dirent.isFile())
    .map((dir) => dir.name);
/**
 * Typecheck and only return those errors relevant to specific files.
 */
const typecheckFiles = async (files) => {
    const errors = [];
    const result = await typecheck();
    if (result.ok) {
        return;
    }
    for (const f of files) {
        const relevantErrors = result.errors.filter((msg) => msg.includes(node_path_1.default.basename(f)));
        if (relevantErrors.length) {
            errors.push(...relevantErrors);
        }
    }
    if (errors.length) {
        throw errors;
    }
};
/**
 * Run
 */
const _main = (async () => {
    try {
        const buildPath = node_path_1.default.resolve(__dirname, "build");
        const testPath = node_path_1.default.resolve(__dirname, "tests");
        if (!node_fs_1.default.existsSync(buildPath)) {
            throw new Error('please run "yarn build"');
        }
        const paths = [buildPath, testPath].flatMap(listFiles);
        await typecheckFiles(paths);
        console.log("Type-checking complete.");
    }
    catch (err) {
        console.error(err);
        process.exit(1);
    }
})();
