"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConfig = void 0;
const tslib_1 = require("tslib");
const joi_1 = tslib_1.__importDefault(require("joi"));
/** Joi schema for performing validation on typewriter.yml files. */
const ConfigSchema = joi_1.default.object()
    .required()
    .keys({
    scripts: joi_1.default.object()
        .optional()
        .keys({
        token: joi_1.default.string().optional().min(1),
        after: joi_1.default.string().optional().min(1),
    }),
    client: joi_1.default.object()
        .required()
        // TODO: The validation should support dynamic Languages ands SDKs.
        .keys({
        sdk: joi_1.default.string().required(),
        // .valid('analytics.js', 'analytics-node', 'analytics-android', 'analytics-ios')
        language: joi_1.default.string().required(),
        // .valid('javascript', 'typescript', 'java', 'swift', 'objective-c'),
    })
        .unknown(),
    // .when('sdk', {
    //   is: Joi.string().valid('analytics.js', 'analytics-node'),
    //   then: {
    //     language: Joi.string().valid('javascript', 'typescript'),
    //     scriptTarget: Joi.string()
    //       .optional()
    //       .valid('ES3', 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ESNext', 'Latest'),
    //     moduleTarget: Joi.string().optional().valid('CommonJS', 'AMD', 'UMD', 'System', 'ES2015', 'ESNext'),
    //   },
    // })
    // .when('sdk', {
    //   is: Joi.string().valid('analytics-android'),
    //   then: { language: Joi.string().valid('java') },
    // })
    // .when('sdk', {
    //   is: Joi.string().valid('analytics-ios'),
    //   then: { language: Joi.string().valid('swift', 'objective-c') },
    // })
    trackingPlans: joi_1.default.array()
        .required()
        .items(joi_1.default.object().keys({
        id: joi_1.default.string().required().min(1),
        path: joi_1.default.string().required().min(1),
        workspaceSlug: joi_1.default.string().optional(),
        legacyID: joi_1.default.string().optional(),
    })),
});
const validateConfig = (rawConfig) => {
    // Validate the provided configuration file using our Joi schema.
    const result = ConfigSchema.validate(rawConfig, {
        abortEarly: false,
        convert: false,
    });
    if (!!result.error) {
        throw new Error(result.error.annotate());
    }
    // We can safely type cast the config, now that is has been validated.
    return rawConfig;
};
exports.validateConfig = validateConfig;
