"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const base_command_1 = require("../base-command");
const config_1 = require("../config");
const NO_TOKEN = '(None)';
class Token extends base_command_1.BaseCommand {
    formatTokenRow(name, token) {
        const color = token.token === undefined ? chalk_1.default.grey : token.isValid ? chalk_1.default.green : chalk_1.default.red;
        return {
            name: color(name),
            value: color(token?.token ?? NO_TOKEN),
            workspace: color(token.workspace?.name ?? ''),
        };
    }
    async run() {
        const inputToken = await (0, config_1.getInputToken)(this.pipedInput, true);
        const scriptToken = await (0, config_1.getScriptToken)(this.workspaceConfig, this.configPath, true);
        const globalToken = await (0, config_1.getGlobalToken)(true);
        core_1.CliUx.ux.table([
            this.formatTokenRow('Input', inputToken),
            this.formatTokenRow('Script', scriptToken),
            this.formatTokenRow('Global', globalToken),
        ], {
            name: {
                header: 'Location',
            },
            value: {
                header: 'Value',
            },
            workspace: {
                header: 'Workspace',
            },
        });
    }
}
exports.default = Token;
Token.description = 'Displays current tokens';
Token.aliases = ['tokens', 't'];
Token.examples = ['<%= config.bin %> <%= command.id %>'];
