"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const core_1 = require("@oclif/core");
const latest_version_1 = tslib_1.__importDefault(require("latest-version"));
const semver_1 = tslib_1.__importDefault(require("semver"));
const base_command_1 = require("../base-command");
class Version extends base_command_1.BaseCommand {
    async run() {
        let latestVersion = '';
        const { name, version } = this.config;
        // Start the spinner while checking versions
        core_1.CliUx.ux.action.start(chalk_1.default.grey('(checking for new versions)'));
        try {
            let options = {};
            // If the user is on a pre-release, check if there's a new pre-release.
            // Otherwise, only compare against stable versions.
            const prerelease = semver_1.default.prerelease(version);
            if (prerelease && prerelease.length > 0) {
                options = { version: 'next' };
            }
            latestVersion = await (0, latest_version_1.default)(name, options);
        }
        catch (error) {
            // If we can't access NPM, then ignore this version check.
            this.error(error);
        }
        // Stop spinner
        core_1.CliUx.ux.action.stop();
        // TODO: This isn't even checking if the version is newer!
        const isLatest = latestVersion === '' || latestVersion === version;
        const newVersionText = !isLatest ? `(new! ${latestVersion})` : '';
        core_1.CliUx.ux.info(`Version: ${version} ${chalk_1.default.yellow(newVersionText)}`);
    }
}
exports.default = Version;
Version.description = 'describe the command here';
Version.examples = ['<%= config.bin %> <%= command.id %>'];
